#pragma checksum "D:\github.com\lisa3907\kakao.net\src\kakao.net\Carousel.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "bef0ed85437a1fc14c3aef452148922937dde044"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace kakao.net
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Kakao.Net.util;
    using System.Timers;
    public class Carousel : BootStrapComponentBase, IDisposable
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 9 "D:\github.com\lisa3907\kakao.net\src\kakao.net\Carousel.cshtml"
            
    private string classname
    {
        get
        {
            return $"carousel slide {Class}";
        }
    }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }
    [Parameter] private int Interval { get; set; } = 5000;
    [Parameter] private bool PauseOnHover { get; set; }

    [Parameter] private int NumberOfItems { get; set; }
    [Parameter] private int ActiveIndex { get; set; }
    [Parameter] private Action<int> ActiveIndexChanged { get; set; }

    private Timer _timer;

    protected override void OnInit()
    {
        if(_timer == null)
        {
            _timer = new Timer(Interval);
            _timer.Elapsed += OnTimerEvent;
            _timer.AutoReset = true;
            _timer.Start();
        }
    }

    private void OnTimerEvent(Object source, ElapsedEventArgs e)
    {
        if (ActiveIndex == NumberOfItems - 1) ActiveIndex = 0;
        else ActiveIndex = ActiveIndex + 1;

        ActiveIndexChanged(ActiveIndex);
    }

    private void onmouseover()
    {
        if (PauseOnHover && _timer != null) _timer.Stop();
    }

    private void onmouseout()
    {
        if (PauseOnHover && _timer != null) _timer.Start();
    }

    public void Dispose()
    {
        if (_timer != null)
        {
            _timer.Stop();
            _timer.Dispose();
            _timer = null;
        }
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
