#pragma checksum "D:\github.com\lisa3907\kakao.net\src\kakao.net\CarouselControl.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "3508c8608f760097c8575299a8f04d4e7eeb61d0"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace kakao.net
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Kakao.Net.util;
    public class CarouselControl : BootStrapComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 8 "D:\github.com\lisa3907\kakao.net\src\kakao.net\CarouselControl.cshtml"
                
    private string classname
    {
        get
        {
            var direction = CarouselDirection == CarouselDirection.Previous ? "prev" : "next";
            return $"carousel-control-{direction} {Class}";
        }
    }
    private string iconClassname
    {
        get
        {
            var direction = CarouselDirection == CarouselDirection.Previous ? "prev" : "next";
            return $"carousel-control-{direction}-icon";
        }

    }
    private string directionName
    {
        get
        {
            return CarouselDirection == CarouselDirection.Previous ? "Previous" : "Next";
        }
    }
    [Parameter] private int ActiveIndex { get; set; }
    [Parameter] private int NumberOfItems { get; set; }
    [Parameter] private CarouselDirection CarouselDirection { get; set; } = CarouselDirection.Previous;
    [Parameter] private string Class { get; set; }

    [Parameter] private Action<int> ActiveIndexChanged { get; set; }

    private void _onclick(UIMouseEventArgs e)
    {
        if (CarouselDirection == CarouselDirection.Previous)
        {
            if (ActiveIndex == 0) ActiveIndex = NumberOfItems - 1;
            else ActiveIndex = ActiveIndex - 1;
        }
        else
        {
            if (ActiveIndex == NumberOfItems - 1) ActiveIndex = 0;
            else ActiveIndex = ActiveIndex + 1;

        }
        ActiveIndexChanged(ActiveIndex);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
