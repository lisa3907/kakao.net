#pragma checksum "D:\github.com\lisa3907\kakao.net\src\kakao.net\Card.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "76172a2ed3ac50e7de914ee1f632050fc6b71ac9"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace kakao.net
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Kakao.Net.util;
    public class Card : BootStrapComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 8 "D:\github.com\lisa3907\kakao.net\src\kakao.net\Card.cshtml"
            
    string classname
    {
        get
        {
            return $"{GetClass()} {Class}";
        }
    }
    private string Tag
    {
        get
        {
            switch (CardType)
            {
                case CardType.Image:
                    return "img";
                case CardType.Title:
                    return "h5";
                case CardType.Subtitle:
                    return "h6";
                case CardType.Text:
                    return "p";
                case CardType.Link:
                    return "a";
                case CardType.Header:
                    return HeadingSize.ToDescriptionString();
                default:
                    return "div";

            }

        }

    }

    [Parameter] private CardType CardType { get; set; } = CardType.Card;
    [Parameter] private VerticalAlignment VerticalAlignment { get; set; } = VerticalAlignment.None;
    [Parameter] private Alignment Alignment { get; set; } = Alignment.Left;
    [Parameter] private HeadingSize HeadingSize { get; set; } = HeadingSize.None;
    [Parameter] private bool IsInverse { get; set; }
    [Parameter] private Color Color { get; set; } = Color.None;
    [Parameter] private bool IsOutline { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private string GetImageVerticalAlignmnet()
    {
        switch (this.VerticalAlignment)
        {
            case VerticalAlignment.Top:
                return "-top";
            case VerticalAlignment.Bottom:
                return "-bottom";
            default:
                return null;
        }
    }

    private string GetCardAlignmnet()
    {
        switch (this.Alignment)
        {
            case Alignment.Center:
                return "text-center";
            case Alignment.Right:
                return "text-right";
            default:
                return null;
        }
    }

    private string GetCardColor()
    {
        if (Color == Color.None) return null;
        var textColor = Color == Color.Light || IsOutline ? null : "text-white";
        var prefix = IsOutline ? "border" : "bg";
        return $"{textColor} {prefix}-{Color.ToDescriptionString()}";
    }

    private string GetTextColor()
    {
        if (IsOutline) return null;
        if (Color == Color.None || Color == Color.Light) return null;
        return $"text-{Color.ToDescriptionString()}";
    }

    private string GetClass()
    {
        switch (this.CardType)
        {
            case CardType.Body:
                return $"card-body {GetTextColor()}";
            case CardType.Card:
                var inverse = IsInverse ? "bg-dark text-white" : null;
                return $"card {GetCardColor()} {GetCardAlignmnet()} {inverse}";
            case CardType.Image:
                return $"card-img{GetImageVerticalAlignmnet()}";
            case CardType.Title:
                return "card-title";
            case CardType.Subtitle:
                return "card-subtitle mb-2 text-muted";
            case CardType.Link:
                return "card-link";
            case CardType.Header:
                return "card-header";
            case CardType.Footer:
                return "card-footer";
            case CardType.ImageOverlay:
                return "card-img-overlay";
            case CardType.Group:
                return "card-group";
            case CardType.Deck:
                return "card-deck";
            case CardType.Columns:
                return "card-columns";
            default:
                return null;
        }
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
