#pragma checksum "D:\github.com\lisa3907\kakao.net\src\kakao.net\BlazorInput.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "e098d62e2fdbf256246b19f60d9a785bbc315f42"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace kakao.net
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Kakao.Net;
    using Kakao.Net.util;
    using Microsoft.AspNetCore.Components;
    public class BlazorInput : BootStrapComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 11 "D:\github.com\lisa3907\kakao.net\src\kakao.net\BlazorInput.cshtml"
            
    string classname
    {
        get
        {
            var size = Size != Size.None ? $"form-control-{Size.ToDescriptionString()}" : null;
            var isvalid = IsValid ? "is-valid" : null;
            var isinvalid = IsInvalid ? "is-invalid" : null;
            var cls = GetClass();
            return $"{isvalid} {isinvalid} {cls} {size} {Class}";
        }
    }

    string Tag
    {
        get
        {
            switch(InputType)
            {
                case InputType.Select:
                    return "select";
                case InputType.TextArea:
                    return "textarea";
                default:
                    return "input";
            }
        }
    }

    [Parameter] private InputType InputType { get; set; } = InputType.Text;
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private bool IsReadonly { get; set; }
    [Parameter] private bool IsPlaintext { get; set; }
    [Parameter] private bool IsDisabled { get; set; }
    [Parameter] private bool IsChecked { get; set; }
    [Parameter] private bool IsValid { get; set; }
    [Parameter] private bool IsInvalid { get; set; }
    [Parameter] private bool IsMultipleSelect { get; set; }
    [Parameter] private int SelectSize { get; set; }
    [Parameter] private int SelectedIndex { get; set; }
    [Parameter] private string Value { get; set; }
    [Parameter] private Action<string> ValueChanged { get; set; }
    [Parameter] private string Class { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private string Type
    {
        get
        {
            return InputType.ToDescriptionString();
        }
    }

    private string GetClass()
    {
        switch (this.InputType)
        {
            case InputType.Checkbox:
                return "form-check-input";
            case InputType.Radio:
                return "form-check-input";
            case InputType.File:
                return "form-control-file";
            case InputType.Range:
                return "form-control-range";
            default:
                return IsPlaintext ? "form-control-plaintext" : "form-control";
        }
    }

    void onchange(UIChangeEventArgs e)
    {
        Console.WriteLine("e: {0}", e.Value);
        Value = e.Value.ToString();
        ValueChanged?.Invoke(Value);
    }

#line default
#line hidden
    }
}
#pragma warning restore 1591
