#pragma checksum "D:\github.com\lisa3907\kakao.net\src\kakao.net\Modal.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "c237cfc6517c0fab7fda960a0df707ecf33b74b8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace kakao.net
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Kakao.Net.util;
    public class Modal : BootStrapComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 19 "D:\github.com\lisa3907\kakao.net\src\kakao.net\Modal.cshtml"
            
        string classname
    {
            get
        {
                var display = IsOpen ? "fade show" : null;
                return $"modal {display} {Class}";
            }
        }
        string innerClassname
    {
            get
        {
                var center = IsCentered ? "modal-dialog-centered" : null;
                var size = Size != Size.None ? $"modal-{Size.ToDescriptionString()}" : null;
                return $"modal-dialog {size} {center}";
            }
        }
        string styles
    {
            get
        {
                var display = IsOpen ? "display: block; padding-right: 17px;" : null;
                return $"{Style} {display}";
            }
        }
    private bool _isOpen;
    [Parameter] private bool IsOpen
    {
        get
        {
            return _isOpen;
        }
        set
        {
            _isOpen = value;

            Task.Run(async () =>
            {
                await (new BootStrapNetInterop(JSRuntime)).ChangeBody(_isOpen ? "modal-open" : null); //TODO: Change to onRender?
            });
        }
    }
    [Parameter] private bool IsCentered { get; set; }
    [Parameter] private Size Size { get; set; } = Size.None;
    [Parameter] private string Class { get; set; }
    [Parameter] private string Style { get; set; }
    [Parameter] private RenderFragment ChildContent { get; set; }

    private bool _dontclickWasClicked;
    void onclick()
    {
        if (!_dontclickWasClicked) IsOpen = false;
        _dontclickWasClicked = false;
        StateHasChanged();
    }

    void dontclick(UIMouseEventArgs e)
    {
        _dontclickWasClicked = true;
    }
    /*void onkeyup(UIKeyboardEventArgs e)
    {
        //TODO: Close on Esc key
        Console.Write("Key: ", e.Key);
    }*/

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private Microsoft.JSInterop.IJSRuntime JSRuntime { get; set; }
    }
}
#pragma warning restore 1591
